#loc1 = loc("x")
module @jit_f attributes {jax.uses_shape_polymorphism = false, mhlo.num_partitions = 1 : i32, mhlo.num_replicas = 1 : i32} {
  func.func public @main(%arg0: tensor<f32> {mhlo.layout_mode = "default"} loc("x")) -> (tensor<f32> {jax.result_info = "", mhlo.layout_mode = "default"}) {
    %0 = stablehlo.multiply %arg0, %arg0 : tensor<f32> loc(#loc10)
    %cst = stablehlo.constant dense<1.000000e+02> : tensor<f32> loc(#loc)
    %1 = stablehlo.divide %0, %cst : tensor<f32> loc(#loc11)
    return %1 : tensor<f32> loc(#loc)
  } loc(#loc)
} loc(#loc)
#loc = loc(unknown)
#loc2 = loc("/Users/joapinto/github/call_jax_from_cpp/call_jax_from_cpp/simple_jax_example.py":12:11)
#loc3 = loc("/Users/joapinto/github/call_jax_from_cpp/call_jax_from_cpp/simple_jax_example.py":20:14)
#loc4 = loc("/Users/joapinto/github/call_jax_from_cpp/call_jax_from_cpp/simple_jax_example.py":38:4)
#loc5 = loc("f"(#loc2))
#loc6 = loc("main"(#loc3))
#loc7 = loc("<module>"(#loc4))
#loc8 = loc(callsite(#loc6 at #loc7))
#loc9 = loc(callsite(#loc5 at #loc8))
#loc10 = loc("jit(f)/jit(main)/mul"(#loc9))
#loc11 = loc("jit(f)/jit(main)/div"(#loc9))
